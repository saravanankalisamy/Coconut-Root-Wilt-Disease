from flask import Flask, request, jsonify
from flask_cors import CORS
import torch
import torch.nn as nn
from PIL import Image
from torchvision import transforms
import timm

# ЁЯМ┤ Disease classes
classes_en = [
    'Bud Root Dropping',
    'Bud Rot',
    'Gray Leaf Spot',
    'Healthy Images',
    'Leaf Rot',
    'Stem Bleeding'
]

classes_ta = [
    'роорпКроЯрпНроЯро┐ройрпН ро╡рпЗро░рпН ро╡ро┐ро┤рпБродро▓рпН',
    'роорпКроЯрпНроЯрпБроЪрпН роЪро┐родрпИро╡рпБ',
    'роЪро╛роорпНрокро▓рпН роЗро▓рпИрокрпН рокрпБро│рпНро│ро┐',
    'роЖро░рпЛроХрпНроХро┐ропроорпН',
    'роЗро▓рпИроЪрпН роЪро┐родрпИро╡рпБ',
    'родрогрпНроЯрпБ роЗро░родрпНродроХрпНроХроЪро┐ро╡рпБ'
]

# ЁЯТК Remedies dictionary
remedies = {
    'Healthy Images': {
        'English': "No treatment required. Maintain good hygiene and proper irrigation.",
        'Tamil': "роОроирпНродро╡ро┐родрооро╛рой роЪро┐роХро┐роЪрпНроЪрпИропрпБроорпН родрпЗро╡рпИропро┐ро▓рпНро▓рпИ. роиро▓рпНро▓ роЪрпБроХро╛родро╛ро░роорпН рооро▒рпНро▒рпБроорпН роирпАро░рпНрокрпНрокро╛роЪройроорпН роЕро╡роЪро┐ропроорпН."
    },
    'Bud Root Dropping': {
        'English': "Use balanced fertilizer and ensure proper soil drainage.",
        'Tamil': "роЪроороиро┐ро▓рпИ роЙро░роорпН рокропройрпНрокроЯрпБродрпНродро┐ роорогрпНрогро┐ройрпН ро╡роЯро┐роХроЯрпНроЯро▓рпИ роЪро░ро┐ропро╛роХ ро╡рпИродрпНродро┐ро░рпБроХрпНроХро╡рпБроорпН."
    },
    'Bud Rot': {
        'English': "Apply Bordeaux mixture (1%) to infected areas and improve drainage.",
        'Tamil': "рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроХрпБродро┐роХро│ро┐ро▓рпН 1% рокрпЛро░рпНроЯрпЛ роХро▓ро╡рпИрокрпН рокрпВроЪро╡рпБроорпН рооро▒рпНро▒рпБроорпН ро╡роЯро┐роХроЯрпНроЯро▓рпИ роорпЗроорпНрокроЯрпБродрпНродро╡рпБроорпН."
    },
    'Gray Leaf Spot': {
        'English': "Spray copper oxychloride (0.3%) or mancozeb 0.25% solution on affected leaves.",
        'Tamil': "рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗро▓рпИроХро│ро┐ро▓рпН 0.3% роХро╛рокрпНрокро░рпН роЖроХрпНро╕ро┐роХрпБро│рпЛро░рпИроЯрпБ роЕро▓рпНро▓родрпБ 0.25% рооро╛роЩрпНроХрпЛроЪрпЖрокрпН родрпЖро│ро┐роХрпНроХро╡рпБроорпН."
    },
    'Leaf Rot': {
        'English': "Remove affected leaves and spray fungicide like Tridemorph 0.1%.",
        'Tamil': "рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗро▓рпИроХро│рпИ роЕроХро▒рпНро▒ро┐ 0.1% роЯрпНро░рпИроЯрпЖрооро╛ро░рпНрокрпН рокрпЛройрпНро▒ рокрпВроЮрпНроЪрпИ рооро░рпБроирпНродрпБ родрпЖро│ро┐роХрпНроХро╡рпБроорпН."
    },
    'Stem Bleeding': {
        'English': "Scrape the infected bark and apply hot coal tar or Bordeaux paste.",
        'Tamil': "рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроЯрпНроЯрпИропрпИ роЙро░роЪро┐ роЪрпВроЯро╛рой роХро░ро┐роороЪрпНроЪро╛ро▒рпБ роЕро▓рпНро▓родрпБ рокрпЛро░рпНроЯрпЛ рокрпЗро╕рпНроЯрпН рокрпВроЪро╡рпБроорпН."
    }
}

# тЪЩя╕П Device setup
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# ЁЯза Load MobileViT model
model = timm.create_model("mobilevit_s", pretrained=False, num_classes=len(classes_en))
model.load_state_dict(torch.load("coconut_disease_best_model (1).pth", map_location=device))
model.to(device)
model.eval()

# ЁЯЦ╝я╕П Image preprocessing
transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])
])

# ЁЯМР Flask app setup
app = Flask(__name__)
CORS(app)

@app.route("/", methods=["GET"])
def home():
    return "тЬЕ CocoCare backend is running."

@app.route("/predict", methods=["POST"])
def predict():
    if "image" not in request.files:
        return jsonify({"error": "No image uploaded"}), 400

    file = request.files["image"]
    try:
        image = Image.open(file.stream).convert("RGB")
    except Exception:
        return jsonify({"error": "Invalid image format"}), 400

    image = transform(image).unsqueeze(0).to(device)

    with torch.no_grad():
        output = model(image)
        probs = torch.nn.functional.softmax(output, dim=1)
        confidence, predicted = torch.max(probs, 1)

    idx = predicted.item()
    disease_en = classes_en[idx]
    disease_ta = classes_ta[idx]
    confidence_pct = round(confidence.item() * 100, 2)

    return jsonify({
        "disease_en": disease_en,
        "disease_ta": disease_ta,
        "remedy_en": remedies[disease_en]["English"],
        "remedy_ta": remedies[disease_en]["Tamil"],
        "confidence": f"{confidence_pct}%"
    })

if __name__ == "__main__":
    app.run(debug=True)
